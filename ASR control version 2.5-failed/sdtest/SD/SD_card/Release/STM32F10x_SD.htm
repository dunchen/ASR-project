<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Release\STM32F10x_SD.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Release\STM32F10x_SD.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 903]: Last Updated: Tue Oct 23 21:17:32 2007
<BR><P>
<H3>Maximum Stack Usage =       1172 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__main &rArr; __rt_entry &rArr; main &rArr; MSD_Init &rArr; SD_Initialize &rArr; SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c836a8]">Reset_Handler</a>
 <LI><a href="#[c836f0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10a0240]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10a0240]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c836a8]">Reset_Handler</a>
 <LI><a href="#[c82f10]">NMIException</a>
 <LI><a href="#[c830c0]">HardFaultException</a>
 <LI><a href="#[c82f58]">MemManageException</a>
 <LI><a href="#[c83618]">BusFaultException</a>
 <LI><a href="#[c82850]">UsageFaultException</a>
 <LI><a href="#[c82cd0]">SVCHandler</a>
 <LI><a href="#[c83348]">DebugMonitor</a>
 <LI><a href="#[c82e80]">PendSVC</a>
 <LI><a href="#[c82c88]">SysTickHandler</a>
 <LI><a href="#[c82808]">WWDG_IRQHandler</a>
 <LI><a href="#[c82ec8]">PVD_IRQHandler</a>
 <LI><a href="#[c82c40]">TAMPER_IRQHandler</a>
 <LI><a href="#[c82da8]">RTC_IRQHandler</a>
 <LI><a href="#[c83108]">FLASH_IRQHandler</a>
 <LI><a href="#[c82e38]">RCC_IRQHandler</a>
 <LI><a href="#[c83300]">EXTI0_IRQHandler</a>
 <LI><a href="#[c83270]">EXTI1_IRQHandler</a>
 <LI><a href="#[c83228]">EXTI2_IRQHandler</a>
 <LI><a href="#[c831e0]">EXTI3_IRQHandler</a>
 <LI><a href="#[c83198]">EXTI4_IRQHandler</a>
 <LI><a href="#[c83540]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[c834f8]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[c834b0]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[c83468]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[c83420]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[c833d8]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[c83390]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[c83660]">ADC_IRQHandler</a>
 <LI><a href="#[c828e0]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[c82898]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[c835d0]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[c83588]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[c83150]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[c82bf8]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[c82b20]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[c82b68]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[c82bb0]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[c82ad8]">TIM2_IRQHandler</a>
 <LI><a href="#[c82a90]">TIM3_IRQHandler</a>
 <LI><a href="#[c82a48]">TIM4_IRQHandler</a>
 <LI><a href="#[c83030]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[c83078]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[c82fa0]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[c82fe8]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[c82d60]">SPI1_IRQHandler</a>
 <LI><a href="#[c82d18]">SPI2_IRQHandler</a>
 <LI><a href="#[c82a00]">USART1_IRQHandler</a>
 <LI><a href="#[c829b8]">USART2_IRQHandler</a>
 <LI><a href="#[c82970]">USART3_IRQHandler</a>
 <LI><a href="#[c832b8]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[c82df0]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[c82928]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[10a01f8]">fputc</a>
 <LI><a href="#[11d7830]">_printf_outstr_char</a>
 <LI><a href="#[11d76c0]">_printf_input_char</a>
 <LI><a href="#[c82f10]">NMIException</a>
 <LI><a href="#[c830c0]">HardFaultException</a>
 <LI><a href="#[c82f58]">MemManageException</a>
 <LI><a href="#[c83618]">BusFaultException</a>
 <LI><a href="#[c82850]">UsageFaultException</a>
 <LI><a href="#[c82cd0]">SVCHandler</a>
 <LI><a href="#[c83348]">DebugMonitor</a>
 <LI><a href="#[c82e80]">PendSVC</a>
 <LI><a href="#[c82c88]">SysTickHandler</a>
 <LI><a href="#[c82808]">WWDG_IRQHandler</a>
 <LI><a href="#[c82ec8]">PVD_IRQHandler</a>
 <LI><a href="#[c82c40]">TAMPER_IRQHandler</a>
 <LI><a href="#[c82da8]">RTC_IRQHandler</a>
 <LI><a href="#[c83108]">FLASH_IRQHandler</a>
 <LI><a href="#[c82e38]">RCC_IRQHandler</a>
 <LI><a href="#[c83300]">EXTI0_IRQHandler</a>
 <LI><a href="#[c83270]">EXTI1_IRQHandler</a>
 <LI><a href="#[c83228]">EXTI2_IRQHandler</a>
 <LI><a href="#[c831e0]">EXTI3_IRQHandler</a>
 <LI><a href="#[c83198]">EXTI4_IRQHandler</a>
 <LI><a href="#[c83540]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[c834f8]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[c834b0]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[c83468]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[c83420]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[c833d8]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[c83390]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[c83660]">ADC_IRQHandler</a>
 <LI><a href="#[c828e0]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[c82898]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[c835d0]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[c83588]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[c83150]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[c82bf8]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[c82b20]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[c82b68]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[c82bb0]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[c82ad8]">TIM2_IRQHandler</a>
 <LI><a href="#[c82a90]">TIM3_IRQHandler</a>
 <LI><a href="#[c82a48]">TIM4_IRQHandler</a>
 <LI><a href="#[c83030]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[c83078]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[c82fa0]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[c82fe8]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[c82d60]">SPI1_IRQHandler</a>
 <LI><a href="#[c82d18]">SPI2_IRQHandler</a>
 <LI><a href="#[c82a00]">USART1_IRQHandler</a>
 <LI><a href="#[c829b8]">USART2_IRQHandler</a>
 <LI><a href="#[c82970]">USART3_IRQHandler</a>
 <LI><a href="#[c832b8]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[c82df0]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[c82928]">USBWakeUp_IRQHandler</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c836a8]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; __main &rArr; __rt_entry &rArr; main &rArr; MSD_Init &rArr; SD_Initialize &rArr; SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[1091608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[1091608]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; main &rArr; MSD_Init &rArr; SD_Initialize &rArr; SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[c836a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[11d0160]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11d0118]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d00d0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11d0088]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11cfe48]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11cfe48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[11cfe48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[11cfce0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[11d60c0]"></a>__ARM_argv_veneer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[11d23a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_get_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c836f0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x_startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1090d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c82f10]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c830c0]"></a>HardFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82f58]"></a>MemManageException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83618]"></a>BusFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82850]"></a>UsageFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83348]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82cd0]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82e80]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82c88]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82808]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82ec8]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82c40]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82da8]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83108]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82e38]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83300]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83270]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83228]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c831e0]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83198]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83540]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c834f8]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c834b0]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83468]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83420]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c833d8]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83390]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83660]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c828e0]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82898]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c835d0]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83588]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83150]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82bf8]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82b20]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82b68]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82bb0]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82ad8]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82a90]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82a48]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83030]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c83078]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82fa0]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82fe8]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82d60]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82d18]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82a00]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c829b8]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82970]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c832b8]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82df0]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c82928]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stm32f10x_vector.o(VECT_TABLE)
<LI> stm32f10x_startup.o(RESET)
</UL>
<P><STRONG><a name="[c75cb0]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[c75c68]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c75c20]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c74b00]"></a>GPIO_DeInit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7add8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c74ab8]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7add8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c74a70]"></a>GPIO_Init</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1097c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[10a0168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupUART1
</UL>

<P><STRONG><a name="[c74a28]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c749e0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c74998]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c74950]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c74908]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c748c0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1099730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HardWareInit
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
</UL>

<P><STRONG><a name="[c74878]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
</UL>

<P><STRONG><a name="[c74830]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c747e8]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c747a0]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c74758]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c74710]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c746c8]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c74680]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10adc20]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10adbd8]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10adb90]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
<LI><a href="#[10adb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[10adb48]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[10adb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10adb00]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10adab8]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ada70]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10ada28]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10ad9e0]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10ad998]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10ad950]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10ad908]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10ad8c0]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10ad878]"></a>RCC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad830]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad7e8]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad7a0]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad758]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad710]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad6c8]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10b3c88]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a46e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[10ad680]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad638]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
<LI><a href="#[1097c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[10a0168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupUART1
</UL>

<P><STRONG><a name="[10ad5f0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c7add8]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c74ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[c74b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[10a4730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[10ab548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
</UL>

<P><STRONG><a name="[c789e0]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a4730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[10ab548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
</UL>

<P><STRONG><a name="[c79cb8]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad5a8]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad560]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad518]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad4d0]"></a>RCC_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ad488]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10ab548]"></a>SPI_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c789e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[c7add8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10ab500]"></a>SPI_Init</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10966f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clk400k
<LI><a href="#[1097c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[10996e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClkToMax
</UL>

<P><STRONG><a name="[10ab4b8]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab470]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10966f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clk400k
<LI><a href="#[1097c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[10996e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClkToMax
</UL>

<P><STRONG><a name="[10ab428]"></a>SPI_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab3e0]"></a>SPI_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab398]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
</UL>

<P><STRONG><a name="[10ab350]"></a>SPI_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
</UL>

<P><STRONG><a name="[10ab308]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab2c0]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab278]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab230]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab1e8]"></a>SPI_CalculateCRC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab1a0]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab158]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab110]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab0c8]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
</UL>

<P><STRONG><a name="[10ab080]"></a>SPI_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10ab038]"></a>SPI_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10aaff0]"></a>SPI_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[10aa3b8]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text), UNUSED)

<P><STRONG><a name="[10aa370]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10aa328]"></a>SysTick_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text), UNUSED)

<P><STRONG><a name="[10aa2e0]"></a>SysTick_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
</UL>

<P><STRONG><a name="[10aa298]"></a>SysTick_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text), UNUSED)

<P><STRONG><a name="[10aa250]"></a>SysTick_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_systick.o(.text), UNUSED)

<P><STRONG><a name="[10a4730]"></a>USART_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c789e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[c7add8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10a46e8]"></a>USART_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10b3c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a0168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupUART1
</UL>

<P><STRONG><a name="[10a46a0]"></a>USART_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4658]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a0168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupUART1
</UL>

<P><STRONG><a name="[10a4610]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a45c8]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4580]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4538]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a44f0]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a44a8]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4460]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4418]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a02d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[10a43d0]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4388]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4340]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a42f8]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a42b0]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4268]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4220]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a41d8]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4190]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4148]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4100]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a40b8]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a4070]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[10a02d0]"></a>SendChar</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[10a4418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[10a01f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[10a0288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[10a0288]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a02d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[10a0240]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10a0240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10912c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
<LI><a href="#[10a0240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[10a01f8]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[10a02d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __0printf.o(.text)
</UL>
<P><STRONG><a name="[10a01b0]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1091bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[10a0168]"></a>SetupUART1</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SetupUART1 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c74a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10a4658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[10a46e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[10ad638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109d018]"></a>MSD_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MSD_Init &rArr; SD_Initialize &rArr; SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109cfd0]"></a>MSD_EarseBlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[109cf88]"></a>MSD_WriteBlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MSD_WriteBlock &rArr; SD_WriteBlock &rArr; SD_WriteSingleBlock &rArr; SD_BlockCommand &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109cd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109cf40]"></a>MSD_ReadBlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MSD_ReadBlock &rArr; SD_ReadBlock &rArr; SD_ReadSingleBlock &rArr; SD_BlockCommand &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109cef8]"></a>MSD_WriteBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[109ceb0]"></a>MSD_ReadBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, msd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[109ce68]"></a>MSD_GetMediumCharacteristics</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, msd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109b858]"></a>SD_SendCmd</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
<LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
<LI><a href="#[109b150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCmdByte6
</UL>
<BR>[Called By]<UL><LI><a href="#[1099898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ActiveInit
<LI><a href="#[109b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetNumWRBlcoks
<LI><a href="#[109b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableCRC
<LI><a href="#[109b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadOCR
<LI><a href="#[109b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseSelectedBlock
<LI><a href="#[109b618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockLen
<LI><a href="#[109b660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCard_Status
<LI><a href="#[109b6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
<LI><a href="#[109b6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCSD
<LI><a href="#[109b780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ResetSD
<LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>

<P><STRONG><a name="[109b810]"></a>SD_PackParam</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdcmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseSelectedBlock
<LI><a href="#[109b618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockLen
<LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>

<P><STRONG><a name="[109b7c8]"></a>SD_BlockCommand</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_BlockCommand &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PackParam
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109b468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseEndBlock
<LI><a href="#[109b4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseStartBlock
<LI><a href="#[109b4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultipleBlock
<LI><a href="#[109b540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteSingleBlock
<LI><a href="#[109b588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultipleBlock
<LI><a href="#[109b5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>

<P><STRONG><a name="[109b780]"></a>SD_ResetSD</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SD_ResetSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[109b738]"></a>SD_ReadRegister</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_ReadRegister &rArr; SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
<LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
<LI><a href="#[109b198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[109b6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCSD
</UL>

<P><STRONG><a name="[109b6f0]"></a>SD_ReadCSD</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadRegister
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10998e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
</UL>

<P><STRONG><a name="[109b6a8]"></a>SD_StopTransmission</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[109cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[109b660]"></a>SD_ReadCard_Status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_ReadCard_Status &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[109cd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[109b618]"></a>SD_SetBlockLen</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SD_SetBlockLen &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PackParam
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[109b5d0]"></a>SD_ReadSingleBlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_ReadSingleBlock &rArr; SD_BlockCommand &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[109cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[109b588]"></a>SD_ReadMultipleBlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[109cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
</UL>

<P><STRONG><a name="[109b540]"></a>SD_WriteSingleBlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_WriteSingleBlock &rArr; SD_BlockCommand &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[109cd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[109b4f8]"></a>SD_WriteMultipleBlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[109b4b0]"></a>SD_EraseStartBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[109ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[109b468]"></a>SD_EraseEndBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_BlockCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[109ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[109b420]"></a>SD_WaitBusy</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_WaitBusy &rArr; SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
<LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseSelectedBlock
<LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[109b3d8]"></a>SD_EraseSelectedBlock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitBusy
<LI><a href="#[109b810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PackParam
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[109b390]"></a>SD_ReadOCR</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_ReadOCR &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[109b348]"></a>SD_EnableCRC</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SD_EnableCRC &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[109b300]"></a>SD_ReadBlockData</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ReadBlockData &rArr; SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
<LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
<LI><a href="#[109b198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[109b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetNumWRBlcoks
<LI><a href="#[109cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
<LI><a href="#[109cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[109b2b8]"></a>SD_GetNumWRBlcoks</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[109b270]"></a>SD_WriteBlockData</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_WriteBlockData &rArr; SD_WaitBusy &rArr; SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
<LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
<LI><a href="#[109b198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCRC16
<LI><a href="#[109b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[109cd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[109b228]"></a>SD_StopMultiToken</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdcmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[109b078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RecByte
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
<LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
</UL>

<P><STRONG><a name="[109b1e0]"></a>SD_SPIDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdcmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SPIDelay &rArr; SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[109b030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[109b198]"></a>SD_GetCRC16</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, sdcrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_GetCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadRegister
</UL>

<P><STRONG><a name="[109b150]"></a>SD_GetCmdByte6</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, sdcrc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_GetCmdByte6
</UL>
<BR>[Called By]<UL><LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>

<P><STRONG><a name="[10999b8]"></a>SD_Sleep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10999b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[10999b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Sleep
</UL>

<P><STRONG><a name="[1099970]"></a>SD_EndSD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sddriver.o(.text), UNUSED)

<P><STRONG><a name="[1099928]"></a>SD_CalTimeout</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_CalTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10998e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
</UL>

<P><STRONG><a name="[10998e0]"></a>SD_GetCardInfo</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[1099928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CalTimeout
<LI><a href="#[109b6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[1099898]"></a>SD_ActiveInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SD_ActiveInit &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[1099850]"></a>SD_StartSD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sddriver.o(.text), UNUSED)

<P><STRONG><a name="[109cdd8]"></a>SD_Initialize</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_Initialize &rArr; SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[10996e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClkToMax
<LI><a href="#[1099730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HardWareInit
<LI><a href="#[10997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCard
<LI><a href="#[1099898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ActiveInit
<LI><a href="#[10998e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[109b0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deassert
<LI><a href="#[109b108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Assert
<LI><a href="#[109b1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPIDelay
<LI><a href="#[109b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableCRC
<LI><a href="#[109b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadOCR
<LI><a href="#[109b618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetBlockLen
<LI><a href="#[109b780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ResetSD
</UL>
<BR>[Called By]<UL><LI><a href="#[109d018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
</UL>

<P><STRONG><a name="[109cd90]"></a>SD_ReadBlock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SD_ReadBlock &rArr; SD_ReadSingleBlock &rArr; SD_BlockCommand &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[10997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCard
<LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[109cf40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
</UL>

<P><STRONG><a name="[109cd48]"></a>SD_ReadMultiBlock</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCard
<LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultipleBlock
<LI><a href="#[109b6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[109ceb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBuffer
</UL>

<P><STRONG><a name="[109cd00]"></a>SD_WriteBlock</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sddriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SD_WriteBlock &rArr; SD_WriteSingleBlock &rArr; SD_BlockCommand &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[1099778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCardWP
<LI><a href="#[10997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCard
<LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteSingleBlock
<LI><a href="#[109b660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCard_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[109cf88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBlock
</UL>

<P><STRONG><a name="[109ccb8]"></a>SD_WriteMultiBlock</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1099778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCardWP
<LI><a href="#[10997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCard
<LI><a href="#[109b228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopMultiToken
<LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetNumWRBlcoks
<LI><a href="#[109b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitBusy
<LI><a href="#[109b4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultipleBlock
<LI><a href="#[109b660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadCard_Status
<LI><a href="#[109b6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[109cef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBuffer
</UL>

<P><STRONG><a name="[109ce20]"></a>SD_EraseBlock</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, sddriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1099778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCardWP
<LI><a href="#[10997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ChkCard
<LI><a href="#[109b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseSelectedBlock
<LI><a href="#[109b468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseEndBlock
<LI><a href="#[109b4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseStartBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[109cfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_EarseBlock
</UL>

<P><STRONG><a name="[1099808]"></a>SD_GetZLGSDVer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sddriver.o(.text), UNUSED)

<P><STRONG><a name="[1099730]"></a>SD_HardWareInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_HardWareInit &rArr; SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c748c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1097c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[10966f8]"></a>SPI_Clk400k</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, sdhal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10ab470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10ab500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[10996e8]"></a>SPI_ClkToMax</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_ClkToMax &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10ab470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10ab500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[109b030]"></a>SPI_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10ab0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[10ab398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[109b1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPIDelay
<LI><a href="#[109b228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopMultiToken
<LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitBusy
<LI><a href="#[109b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadRegister
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>

<P><STRONG><a name="[109b078]"></a>SPI_RecByte</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_RecByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10ab0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[10ab350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[10ab398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[109b228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopMultiToken
<LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitBusy
<LI><a href="#[109b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadRegister
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>

<P><STRONG><a name="[109b108]"></a>SPI_CS_Assert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c74878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[109b228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopMultiToken
<LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitBusy
<LI><a href="#[109b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadRegister
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[109b0c0]"></a>SPI_CS_Deassert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c748c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[109b228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopMultiToken
<LI><a href="#[109b270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlockData
<LI><a href="#[109b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlockData
<LI><a href="#[109b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitBusy
<LI><a href="#[109b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadRegister
<LI><a href="#[109b858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[10997c0]"></a>SD_ChkCard</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[109cd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[109cd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlock
<LI><a href="#[109cd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[109cdd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[109ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[1099778]"></a>SD_ChkCardWP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlock
<LI><a href="#[109cd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[109ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EraseBlock
</UL>

<P><STRONG><a name="[10939e0]"></a>SetupClock</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetupClock &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[c75cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[10aa2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_ITConfig
<LI><a href="#[10aa370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_SetReload
<LI><a href="#[10ad638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[10ad8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[10ad908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[10ad950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[10ad998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[10ad9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[10ada28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[10ada70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[10adb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[10adb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[10adbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[10adc20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1093998]"></a>Sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1093950]"></a>main</STRONG> (Thumb, 200 bytes, Stack size 1048 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156<LI>Call Chain = main &rArr; MSD_Init &rArr; SD_Initialize &rArr; SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[1091b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
<LI><a href="#[1093998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep
<LI><a href="#[10939e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupClock
<LI><a href="#[109ce68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetMediumCharacteristics
<LI><a href="#[109cf40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadBlock
<LI><a href="#[109cf88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteBlock
<LI><a href="#[109d018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
<LI><a href="#[10a0168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupUART1
</UL>
<BR>[Called By]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10923f0]"></a>__printf</STRONG> (Thumb, 734 bytes, Stack size 56 bytes, __printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1091ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[1092048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb (Weak Reference)
<LI><a href="#[1092090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[10920d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str (Weak Reference)
<LI><a href="#[1092120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[1092168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct (Weak Reference)
<LI><a href="#[10921b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex (Weak Reference)
<LI><a href="#[10921f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (Weak Reference)
<LI><a href="#[1092240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
<LI><a href="#[1092288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (Weak Reference)
<LI><a href="#[10922d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[11dbd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[10923a8]"></a>_printf_return_value</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(.text), UNUSED)

<P><STRONG><a name="[1092360]"></a>_printf_percent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(.text), UNUSED)

<P><STRONG><a name="[1092318]"></a>_printf_sizespec</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(.text), UNUSED)

<P><STRONG><a name="[1091ec8]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, _printf_dec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1091da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[1091df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[11daf68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[11dbf40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1091bb8]"></a>__0printf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, __0printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a01b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[11dbd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1091b70]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, __0printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10918d8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[1091890]"></a>__rt_stackheap_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1090d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[11dc430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1091848]"></a>__rt_heap_extend</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stkheap2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1091770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[1091350]"></a>__rt_entry</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; main &rArr; MSD_Init &rArr; SD_Initialize &rArr; SD_GetCardInfo &rArr; SD_ReadCSD &rArr; SD_SendCmd &rArr; SD_GetCmdByte6
</UL>
<BR>[Calls]<UL><LI><a href="#[1091890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
<LI><a href="#[1093950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11d5500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[11d5670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
<LI><a href="#[11d6c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1091608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11d0118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1091308]"></a>__rt_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[10912c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
<LI><a href="#[11d5fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[11d6c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[10912c0]"></a>__rt_abort</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, kernel.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10a0240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1091308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[1090d90]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c836f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[11da718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1091890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[11dc430]"></a>__rt_stackheap_storage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1091890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[11dbf40]"></a>_printf_int_common</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, _printf_intcommon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11dbeb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[11dbef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1091ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11dbd38]"></a>_printf_char_common</STRONG> (Thumb, 42 bytes, Stack size 88 bytes, _printf_char_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1091bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[11daf68]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1091ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11da760]"></a>__user_libspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11da718]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1090d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11da6d0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11d7830]"></a>_printf_outstr_char</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_outstr_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_outstr_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[11d76c0]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_input_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[11d6c38]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exit &rArr; __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[1091308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[11d6ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d6030]"></a>__rt_lib_init</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d21b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
<LI><a href="#[11d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BX)
<LI><a href="#[11d45f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[11d5a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[11d5a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init (Weak Reference)
<LI><a href="#[11d5b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[11d5bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[11d5bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
<LI><a href="#[11d5c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[11d5c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (Weak Reference)
<LI><a href="#[11d5cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[11d5d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[11d5d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[11d5da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[11d5e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[11d5e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[11d5f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[11d60c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
<LI><a href="#[11db628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (via BX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d5fe8]"></a>__rt_lib_shutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[11d5df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
<LI><a href="#[11db5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (via BX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1091308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>

<P><STRONG><a name="[11d5670]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d5500]"></a>_platform_post_lib_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1091350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11d45f0]"></a>__rt_locale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[11d23a0]"></a>__ARM_get_argv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, no_argv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d60c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer
</UL>

<P><STRONG><a name="[11d1c40]"></a>__rt_fp_status_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d21b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[11d21b8]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d1c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[11d2170]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1097c10]"></a>SPI_Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, sdhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c74a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10ab470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[10ab500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[10ad638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1099730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_HardWareInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[11d5f10]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5e80]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5e38]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5df0]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d5fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[1091770]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1091848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[11d5da8]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d6ba8]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[11d5d60]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5d18]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5cd0]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5c88]"></a>_get_lc_ctype</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5c40]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5bf8]"></a>_get_lc_numeric</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5bb0]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5b68]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[10922d0]"></a>_printf_charcount</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[1092288]"></a>_printf_fp_dec</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[1092240]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[10921f8]"></a>_printf_longlong_dec</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[10921b0]"></a>_printf_longlong_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[1092168]"></a>_printf_longlong_oct</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[1092120]"></a>_printf_mbtowc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[11dbef8]"></a>_printf_post_padding</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11dbf40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common (Weak Reference)
</UL>

<P><STRONG><a name="[11dbeb0]"></a>_printf_pre_padding</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11dbf40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common (Weak Reference)
</UL>

<P><STRONG><a name="[10920d8]"></a>_printf_str</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[1091df0]"></a>_printf_truncate_signed</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1091ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (Weak Reference)
</UL>

<P><STRONG><a name="[1091da8]"></a>_printf_truncate_unsigned</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1091ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (Weak Reference)
</UL>

<P><STRONG><a name="[1092090]"></a>_printf_wc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[1092048]"></a>_printf_wctomb</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10923f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[11d5a90]"></a>_rand_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[11d5a48]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[11d6030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>
<HR></body></html>
